#!/bin/bash

# Make Variables Available For Later Use
LOGDIR=/var/log/easyengine
ERRORLOG=/var/log/easyengine/error.log
INSTALLLOG=/var/log/easyengine/install.log
LINUX_DISTRO=$(lsb_release -i |awk '{print $3}')
EE_IP_ADDRESS=$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')
EPELREPO=/etc/yum.repos.d/epel.repo
NGINXREPO=/etc/yum.repos.d/nginx.repo
REMIREPO=/etc/yum.repos.d/remi.repo

# Main EasyEngine Function To Log All The Outputs
EasyEngine()
{

# Add TimeStamps In Install Log File
echo &>> $INSTALLLOG
echo &>> $INSTALLLOG
echo -e "\033[36mEasyEngine (ee) Execution Started [$(date)]\e[0m" &>> $INSTALLLOG
echo -e "\033[36mEasyEngine (ee) Command: $0 $@\e[0m" &>> $INSTALLLOG


# Capture Errors
OwnError()
{
	echo -e "[ `date` ] \033[31m $@ \e[0m" | tee -ai $ERRORLOG
	exit 101
}

# Check Auto Assume Yes Or No To Apt-Get
APTASSUMEYES ()
{
	grep apt-get-assume-yes /etc/easyengine/ee.conf | grep -i true &>> /dev/null
	if [ $? -eq 0 ]
	then
		EEAPTGET="yum -y"
	else
		# Check Any WebServer Package Is Installed Or Not
		rpm -qa | egrep -e 'nginx|php|mysql|postfix|httpd' &>> $INSTALLLOG
		if [ $? -ne 0 ]
		then
			EEAPTGET="yum -y"
		else
			EEAPTGET="yum -y"
		fi
	fi
}

#Add Nginx repo 
NGINXREPO()
{
	if [ -f $NGINXREPO ]	
	then
		echo -e "\033[36m Nginx Repository is already installed, moving on...\e[0m"
	else
		# Add Nginx Repository
		echo -e "\033[36mAdding Nginx Repository, Please Wait...\e[0m"
		rpm -Uvh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm &>> $INSTALLLOG || OwnError "Unable To Add Nginx Repository"

	fi
}
#Add EPEL Repo
EPELREPO()
{
	if [ -f $EPELREPO ]
	then
		echo -e "\033[36m EPEL Repository is already installed, moving on...\e[0m"
	else
		# Add EPEL Repository
		echo -e "\033[36mAdding EPEL Repository, Please Wait...\e[0m"
		rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm &>> $INSTALLLOG || OwnError "Unable To Add EPEL Repository"
	fi

}
#Add REMI Repo
REMIREPO()
{
	if [ -f $REMIREPO ]
	then
		echo -e "\033[36m REMI Repository is already installed, moving on...\e[0m"
	else
		# Add REMI Repository
		echo -e "\033[36mAdding REMI Repository, Please Wait...\e[0m"
		rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm &>> $INSTALLLOG || OwnError "Unable To Add REMI Repository"
		
	fi

}
NGINXINSTALLTWEAKS ()
{
	# Define Nginx Package
	NGINXPACKAGE=nginx
}

INSTALLNGINX()
{
	# Select Nginx Package
	NGINXINSTALLTWEAKS

	# Install Nginx Package
	echo -e "\033[34mInstalling Nginx, Please Wait...\e[0m"
	$EEAPTGET install $NGINXPACKAGE || OwnError "Unable To Install Nginx"
}
HTTPAUTH()
{
	# Get The htpasswd Details
	HTPASSWDUSER=$(grep htpasswduser /etc/easyengine/ee.conf | awk '{print($3)}')
	HTPASSWDPASS=$(grep htpasswdpass /etc/easyengine/ee.conf | awk '{print($3)}')

	# Ask User To Provide HTTP AUTH Username & Password
	if [ -z "$HTPASSWDUSER" ]
	then
		read -p "Enter The HTTP AUTH Username [easyengine]: " HTPASSWDUSER
		# Turn Off Echo For Passwords
		stty -echo
		read -p "Enter The HTTP AUTH Password [easyengine]: " HTPASSWDPASS
		stty echo
		echo
	fi

	# If Enter Is Pressed, User Defaults
	if [[ $HTPASSWDUSER = "" ]]
	then
		HTPASSWDUSER=easyengine
	fi

	if [[ $HTPASSWDPASS = "" ]]
	then
		HTPASSWDPASS=easyengine
	fi

	# Add HTTP Auth Details In EE Configuration File
	sed -i "s/htpasswduser.*/htpasswduser = $HTPASSWDUSER/" /etc/easyengine/ee.conf
	sed -i "s/htpasswdpass.*/htpasswdpass = $HTPASSWDPASS/" /etc/easyengine/ee.conf

	# Generate htpasswd-ee file
	printf "$HTPASSWDUSER:$(openssl passwd -crypt $HTPASSWDPASS 2> /dev/null)\n" > /etc/nginx/htpasswd-ee 2> /dev/null
}

COMMONNGINX()
{
	# Personal Settings For Nginx
	echo -e "\033[36mUpdating Nginx Configuration Files, Please Wait...\e[0m"

	grep "Easy Engine" /etc/nginx/nginx.conf &> /dev/null
	if [ $? -ne 0 ]
	then

		# Change Nginx Main Section Settings	
		sed -i "s/worker_processes.*/worker_processes auto;/" /etc/nginx/nginx.conf
		sed -i "/worker_processes/a \worker_rlimit_nofile 100000;" /etc/nginx/nginx.conf

		# Change Nginx Events Section Settings
		sed -i "s/worker_connections.*/worker_connections 1024;/" /etc/nginx/nginx.conf
		sed -i "s/# multi_accept/multi_accept/" /etc/nginx/nginx.conf

		# Disable Nginx Version Set Custom Headers Proxy And SSL Settings
		sed -i "s/http {/http {\n\t##\n\t# Easy Engine Settings\n\t##\n\n\tserver_tokens off;\n\treset_timedout_connection on;\n\tadd_header X-Powered-By "the www";\n\tadd_header rt-Fastcgi-Cache \$upstream_cache_status;\n\n\t# Limit Request\n\tlimit_req_status 403;\n\tlimit_req_zone \$binary_remote_addr zone=one:10m rate=1r\/s;\n\n\t# Proxy Settings\n\t# set_real_ip_from\tproxy-server-ip;\n\t# real_ip_header\tX-Forwarded-For;\n\n\tfastcgi_read_timeout 300;\n\tclient_max_body_size 100m;\n\n\t# SSL Settings\n\tssl_session_cache shared:SSL:20m;\n\tssl_session_timeout 10m;\n\tssl_prefer_server_ciphers on;\n\tssl_ciphers HIGH:\!aNULL:\!MD5:\!kEDH;\n\n/" /etc/nginx/nginx.conf

		# Change Keepalive Timeout Settings
		sed -i "s/keepalive_timeout.*/keepalive_timeout 30;/" /etc/nginx/nginx.conf

		# Enable Gzip
		sed -i "s/# gzip/gzip/" /etc/nginx/nginx.conf
	fi

	# Check Directory Exist
	if [ ! -d /etc/nginx/conf.d ]
	then
		mkdir /etc/nginx/conf.d || OwnError "Unable To Create /etc/nginx/conf.d"
	fi
	chkconfig nginx on


	# Update Nginx Configuration Files
	EESOURCE="/usr/share/easyengine/nginx/conf.d"
	EEDEST="/etc/nginx/conf.d"
	

	# Update Nginx Common Files
	EESOURCE="/usr/share/easyengine/nginx/common"
	EEDEST="/etc/nginx/common"
	
	#cp /usr/share/easyengine/nginx/22222 /etc/nginx/conf.d/22222.conf || OwnError "Unable To Copy 22222 Nginx Configuration File"

}

INSTALLPHP()
{
	# Install php
	echo -e "\033[36mRemoving earlier versions of PHP and mysql, Please Wait...\e[0m"
	yum -y remove php* mysql
	echo -e "\033[36mInstalling PHP and mysql, Please Wait...\e[0m"
	$EEAPTGET --enablerepo=remi install php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached mysql-server || OwnError "Unable To Install PHP"
	chkconfig php-fpm on
	service php-fpm restart
	
}

COMMONPHP()
{
	# Personal Settings For PHP
	echo -e "\033[36mUpdating PHP Configuration Files, Please Wait...\e[0m"

	# Needed For Custom php Logs
	if [ ! -d /var/log/php/ ]
	then
		mkdir -p /var/log/php/ || OwnError "Unable To Create php Log Directory: /var/log/php/"
	fi

	grep "Easy Engine" /etc/php.ini &> /dev/null
	if [ $? -ne 0 ]
	then

		TIME_ZONE=$(cat /etc/timezone | head -n1 | sed "s'/'\\\/'")

		# Move PHPâ€™s Session Storage To Memcache
		sed -i "/extension/a \session.save_handler = memcache\nsession.save_path = \"tcp://localhost:11211\"" /etc/php/mods-available/memcache.ini

		# Change PHP Settings
		sed -i "s/\[PHP\]/[PHP]\n; Easy Engine/" /etc/php.ini
		sed -i "s/expose_php.*/expose_php = Off/" /etc/php.ini
		sed -i "s/post_max_size.*/post_max_size = 100M/" /etc/php.ini
		sed -i "s/upload_max_filesize.*/upload_max_filesize = 100M/" /etc/php.ini
		sed -i "s/max_execution_time.*/max_execution_time = 300/" /etc/php.ini
		sed -i "s/;date.timezone.*/date.timezone = $TIME_ZONE/" /etc/php.ini

		# Change php-FPM Error Logs Location
		sed -i "s'error_log.*'error_log = /var/log/php/fpm.log'" /etc/php-fpm.conf

		# Enable PHP Status & Ping
		sed -i "s/;ping.path/ping.path/" /etc/php-fpm.d/www.conf
		sed -i "s/;pm.status_path/pm.status_path/" /etc/php-fpm.d/www.conf

		# Change PHP Pool Settings MAX Servers & Request Terminate Timeout
		sed -i "s/;pm.max_requests/pm.max_requests/" /etc/php-fpm.d/www.conf
		sed -i "s/pm.max_children = 5/pm.max_children = 100/" /etc/php-fpm.d/www.conf
		sed -i "s/pm.start_servers = 2/pm.start_servers = 20/" /etc/php-fpm.d/www.conf
		sed -i "s/pm.min_spare_servers = 1/pm.min_spare_servers = 10/" /etc/php-fpm.d/www.conf
		sed -i "s/pm.max_spare_servers = 3/pm.max_spare_servers = 30/" /etc/php-fpm.d/www.conf
		sed -i "s/;request_terminate_timeout.*/request_terminate_timeout = 300/" /etc/php-fpm.d/www.conf
		sed -i "s/pm = dynamic/pm = ondemand/" /etc/php-fpm.d/www.conf || OwnError "Unable To Chnage Process Manager From Dynamic To Ondemand"
		
		# Change PHP Fastcgi Socket
		sed -i "s'listen = /var/run/php-fpm.sock'listen = 127.0.0.1:9000'" /etc/php-fpm.d/www.conf || OwnError "Unable To Change PHP Fastcgi Socket"

		# Separate PHP POOL For Slow Logs
		cp /etc/php-fpm.d/www.conf /etc/php-fpm.d/debug.conf
		sed -i "s'\[www\]'[debug]'" /etc/php-fpm.d/debug.conf || OwnError "Unable To Change PHP Pool Name"
		sed -i "s'listen = 127.0.0.1:9000'listen = 127.0.0.1:9001'" /etc/php-fpm.d/debug.conf || OwnError "Unable To Change PHP Fastcgi Listen Port"
		#sed -i "s/pm = dynamic/pm = ondemand/" /etc/php-fpm.d/debug.conf || OwnError "Unable To Chnage Process Manager From Dynamic To Ondemand"
		sed -i "s';slowlog.*'slowlog = /var/log/php/slow.log'"  /etc/php-fpm.d/debug.conf || OwnError "Unable To Change PHP Slowlog"
		sed -i "s';request_slowlog_timeout.*'request_slowlog_timeout = 10s'"  /etc/php-fpm.d/debug.conf || OwnError "Unable To Change PHP Request Slowlog Timeout"
		echo -e "php_admin_value[xdebug.profiler_output_dir] = /tmp/ \nphp_admin_value[xdebug.profiler_output_name] = cachegrind.out.%p-%H-%R \nphp_admin_flag[xdebug.profiler_enable_trigger] = on \nphp_admin_flag[xdebug.profiler_enable] = off" | tee -ai  /etc/php-fpm.d/debug.conf &>> $INSTALLLOG \
		|| OwnError "Unable To Add Xdebug Settings"
	fi
}

WP-CLI()
{
	# Install WP-CLI
	if [ ! -f /usr/local/bin/wp ]
	then
		echo -e "\033[31mWP-CLI Command Not Found\e[0m"
		echo -e "\033[36mInstalling WP-CLI, Please Wait...\e[0m"
		curl -kL https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > wp-cli.phar && chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp &>> $INSTALLLOG \
		|| OwnError "Unable To Install WP-CLI"

		# Add WP-CLI Auto Completion
		#cp -i /usr/share/easyengine/wp-cli/vendor/wp-cli/wp-cli/utils/wp-completion.bash /etc/bash_completion.d/
		#source /etc/bash_completion.d/wp-completion.bash
	else
		echo -e "\033[36mAlready Installed WP-CLI (/usr/share/easyengine/wp-cli)\e[0m"
	fi
}

PHP_PACKAGES()
{
	echo -e "\033[36mLook out echoing nothing here\e[0m"
}


MYSQLINSTALLTWEAKS()
{
	# MySQL Password Only Set If MySQL Is Not Installed
	# If MySQL Is Installed Don't Set Wrong Password In ~/.my.cnf
	rpm -qa | grep mysql-server &>> $INSTALLLOG

	if [ $? -ne 0 ]
	then
		# Setting Up MySQL Password
		MYSQLAUTOPASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n1)
		debconf-set-selections <<< "mysql-server mysql-server/root_password password $MYSQLAUTOPASS"
		debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $MYSQLAUTOPASS"

		# Generate ~/.my.cnf
		echo -e "[client]\nuser=root\npassword=$MYSQLAUTOPASS" > ~/.my.cnf
	fi
}

INSTALLMYSQL()
{
	# Setting Up MySQL Password
	MYSQLINSTALLTWEAKS

	# Install MySQL
	echo -e "\033[36mInstalling MySQL, Please Wait...\e[0m"
	$EEAPTGET install mysql-server mysqltuner \
	|| OwnError "Unable To Install MySQL"
}

COMMONMYSQL()
{
	# Personal Settings For MySQL
	echo -e "\033[36mUpdating MySQL Configuration Files, Please Wait...\e[0m"

	# Decrease MySQL Wait Timeout
	sed -i "/#max_connections/a wait_timeout = 30 \ninteractive_timeout = 60" /etc/my.cnf
	service mysqld restart
	/usr/bin/mysql_secure_installation
	chkconfig mysqld on
	
	# Call PHPUSERINFO Function For PHP User Details
	PHPUSERINFO


}

INSTALLALL()
{
	# Setting Up Nginx MySQL & Postfix
	NGINXINSTALLTWEAKS
	MYSQLINSTALLTWEAKS
	

	# Install Nginx php MySQL Postfix
	echo -e "\033[36mInstalling Nginx php MySQL Postfix, Please Wait...\e[0m"
	$EEAPTGET install $NGINXPACKAGE php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached mysql-server mysqltuner percona-toolkit postfix \
	|| OwnError "Unable To Install Nginx php MySQL Postfix"
}


# Remove Package Functions
REMOVENGINX()
{
	# Select Nginx Package
	NGINXINSTALLTWEAKS

	# Remove Nginx
	echo -e "\033[36mRemoving Nginx, Please Wait...\e[0m"
	$EEAPTGET remove $NGINXPACKAGE nginx || OwnError "Unable To Remove Nginx"
}

REMOVEPHP()
{
	# Remove php
	echo -e "\033[36mRemoving php, Please Wait...\e[0m"
	$EEAPTGET remove php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached mysql-server || OwnError "Unable To Remove php"
}

REMOVEWPCLI()
{
	# Remove WP-CLI
	echo -e "\033[36mRemoving WP-CLI, Please Wait...\e[0m"
	rm -rf /usr/share/easyengine/wp-cli /usr/bin/wp /etc/bash_completion.d/wp-completion.bash || OwnError "Unable To Remove WP-CLI"
}

REMOVEMYSQL()
{
	# Remove MySQL
	echo -e "\033[36mRemoving MySQL, Please Wait...\e[0m"
	$EEAPTGET remove mysql-server mysqltuner percona-toolkit \
	|| OwnError "Unable To Remove MySQL"
}

REMOVEPOSTFIX()
{
	# Remove Postfix
	echo -e "\033[36mRemoving Postfix, Please Wait...\e[0m"
	$EEAPTGET remove postfix || OwnError "Unable To Remove Postfix"
}

REMOVEALL()
{
	# Select Nginx Package
	NGINXINSTALLTWEAKS

	# Remove Nginx php MySQL Postfix
	echo -e "\033[36mRemoving Nginx php MySQL Postfix, Please Wait...\e[0m"
	$EEAPTGET remove $NGINXPACKAGE php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached mysql-server mysqltuner percona-toolkit postfix \
	|| OwnError "Unable To Remove Nginx php MySQL Postfix"
}

AUTOREMOVE()
{
	# Remove Unwanted Packages
	echo -e "\033[36mRemoving Unwanted Packages, Please Wait...\e[0m"
	$EEAPTGET autoremove || OwnError "Unable To Auto Remove"
}


# Purge Package Functions
PURGENGINX()
{
	# Select Nginx Package
	NGINXINSTALLTWEAKS
	
	# Purge Nginx
	echo -e "\033[36mPurge Nginx, Please Wait...\e[0m"
	$EEAPTGET purge $NGINXPACKAGE nginx || OwnError "Unable To Purge Nginx"
}

PURGEPHP()
{
	# Purge php
	echo -e "\033[36mPurge php, Please Wait...\e[0m"
	$EEAPTGET purge php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached || OwnError "Unable To Purge php"
}

PURGEMYSQL()
{
	# Purge MySQL
	echo -e "\033[36mPurge MySQL, Please Wait...\e[0m"
	$EEAPTGET purge mysql-server mysqltuner percona-toolkit \
	|| OwnError "Unable To Purge MySQL"
}

PURGEPOSTFIX()
{
	# Purge Postfix
	echo -e "\033[36mPurge Postfix, Please Wait...\e[0m"
	$EEAPTGET purge postfix || OwnError "Unable To Purge Postfix"
}

PURGEALL()
{
	# Purge Nginx php MySQL Postfix
	echo -e "\033[36mRemoving Nginx php MySQL Postfix, Please Wait...\e[0m"
	$EEAPTGET purge $NGINXPACKAGE nginx-common php-common php-mysqlnd php-xmlrpc \
	php-curl php-gd php-cli php-fpm php-imap php-mcrypt php-xdebug \
	php-memcache memcached mysql-server mysqltuner percona-toolkit postfix \
	|| OwnError "Unable To Purge Nginx php MySQL Postfix"
}

# EasyEngine Status Function
EE_SYSTEM_STATUS()
{
	OPERATING_SYSTEM=$(lsb_release -d | awk '{print $2,$3,$4}')
	SYSTEM_LOAD=$(cat /proc/loadavg | awk '{print $1}')
	PROCESSES=$(ps ax | wc -l)
	MEMORY_TOTAL=$(free | grep Mem: | awk '{print $2}')
	MEMORY_USED=$(free | grep Mem: | awk '{print $3}')
	MEMORY_BUFFERS=$(free | grep Mem: | awk '{print $6}')
	MEMORY_CACHE=$(free | grep Mem: | awk '{print $7}')
	SWAP_TOTAL=$(free | grep Swap: | awk '{print $2}')
	MEMORY_USAGE=$(echo "($MEMORY_USED-$MEMORY_BUFFERS-$MEMORY_CACHE)*100/$MEMORY_TOTAL" | bc -l | cut -d'.' -f1)
	if [[ $SWAP_TOTAL > 0 ]]
	then
		SWAP_USED=$(free | grep Swap: | awk '{print $3}')
		SWAP_USAGE=$(echo "$SWAP_USED*100/$SWAP_TOTAL" | bc -l | cut -d'.' -f1)%
	else
		SWAP_USAGE=$(echo "N/A")
	fi
	LOGGED_IN_USERS=$(w -h | wc -l)
	ROOT_PARTITION_USAGE=$(df -h | grep /$ | awk '{print $5}')

	NGINX_STATUS=$(service nginx status | grep 'nginx is running' &>> $INSTALLLOG && echo -e "\033[36mRunning\e[0m" || echo -e "\033[31mStopped\e[0m")
	PHP_STATUS=$(service php-fpm status | grep running &>> $INSTALLLOG && echo -e "\033[36mRunning\e[0m" || echo -e "\033[31mStopped\e[0m")
	MYSQL_STATUS=$(service mysql status | grep running &>> $INSTALLLOG && echo -e "\033[36mRunning\e[0m" || echo -e "\033[31mStopped\e[0m")
	POSTFIX_STATUS=$(service postfix status | grep 'postfix is running' &>> $INSTALLLOG && echo -e "\033[36mRunning\e[0m" || echo -e "\033[31mStopped\e[0m")

	echo
	echo
	echo -e "\033[37m  System information as of $(/bin/date)\e[0m"
	echo
	echo -e "  System load:\t$SYSTEM_LOAD\t\t  Processes:\t\t$PROCESSES"
	echo -e "  Usage of /:\t$ROOT_PARTITION_USAGE\t\t  Users logged in:\t$LOGGED_IN_USERS"
	echo -e "  Memory usage:\t$MEMORY_USAGE%\t\t  Swap usage:\t\t$SWAP_USAGE"
	echo
	echo -e "\033[37m  Service status information\e[0m"
	echo
	echo -e "  Nginx:\t$NGINX_STATUS"
	echo -e "  php-FPM:\t$PHP_STATUS"
	echo -e "  MySQL:\t$MYSQL_STATUS"
	echo -e "  Postfix:\t$POSTFIX_STATUS"
	echo
	echo
}

MYSQLUSERPASS()
{
	read -p "Enter The MySQL Username [root]: " MYSQLUSER
	# If Enter Is Pressed, Then Use root as MySQL User
	if [[ $MYSQLUSER = "" ]]
	then
		MYSQLUSER=root
	fi

	# Turn Off Echo For Passwords
	stty -echo
	read -p "Enter The MySQL Password: " MYSQLPASS
	stty echo
	echo
}


MYSQLPASSCHECK()
{
	while [ -n $(mysqladmin -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS ping 2> /dev/null | grep alive) &> /dev/null ]
	do
		# Verify MySQL Credentials
		MYSQLUSERPASS
	done
}

MYSQLROOT()
{
	MYSQLUSER=$(cat ~/.my.cnf | grep user | cut -d'=' -f2)
	MYSQLPASS=$(cat ~/.my.cnf | grep pass | cut -d'=' -f2 | sed -e 's/^"//'  -e 's/"$//')
}
# GET Information Function
MYSQLINFO()
{
	# Get The MySQL Host
	MYSQLHOST=$(grep mysqlhost /etc/easyengine/ee.conf | awk '{print($3)}')

	# MySQL Default Host: localhost
	if [[ $MYSQLHOST = "" ]]
	then
		MYSQLHOST=localhost
	fi
	
	if [ -f ~/.my.cnf ]
	then
		MYSQLROOT
	else
		# Verify MySQL Credentials
		MYSQLUSERPASS
	fi

	# Verify MySQL Credentials
	MYSQLPASSCHECK

	# Replace Dot With Underscore In $DOMAIN Name
	REPLACEDOT=$(echo $DOMAIN | tr '.' '_')

	# Check Use Default DB Name Or Custom DB Name
	grep customdbname /etc/easyengine/ee.conf | grep -i true &>> /dev/null

	if [ $? -eq 0 ]
	then
		read -p "Enter The MySQL Database Name [$REPLACEDOT]: " WPDBNAME
	fi

	# If customdbname = false 
	# 		Then It Never Ask For MySQL Database Name In This Case $WPDBNAME Is Empty
	# If customdbname = true
	#		User Enter Custom Databse Name Then WPDBNAME Is Not Empty & We Used Provided Database Name
 	#		If User Pressed Enter Then $WPDBNAME Is Empty

	if [[ $WPDBNAME = "" ]]
	then
		WPDBNAME=$REPLACEDOT
	fi
}

EEWPDBPREFIX()
{
	# Get The WordPress Database Table Prefix
	WPDBPREFIX=$(grep wpdbprefix /etc/easyengine/ee.conf | awk '{print($3)}')
	
	# Display WPDBPREFIX Valid Characters Warning & Try Again
	while [ $(echo $WPDBPREFIX | grep  '[^[:alnum:] _]') ]
	do
		echo -e "\033[31mWarning: \033[36mTable Prefix Can Only Contain Numbers, Letters, And Underscores.\e[0m"
		# For Proper read Command Output
		stty echo
		read -p "Enter The MySQL Database Table Prefix [wp_]: " WPDBPREFIX
	done

	# WordPress Database Table Prefix Default: wp_
	if [[ $WPDBPREFIX = "" ]]
	then
		WPDBPREFIX=nT_
	fi
}

FIXMYSQLUSER16()
{
	# Fix MySQL USER ERROR 1470 (HY000)
	MYSQLUSER16=$(echo -n $WPDBUSER | wc -c)

	if [[ $MYSQLUSER16 -gt 16 ]]
	then
		echo MySQL Database Username $WPDBUSER = $MYSQLUSER16 &>> $INSTALLLOG
		echo -e "\033[36mAuto Fix MySQL Username To The 16 Characters\e[0m"
		RANDOM_CHARACTER=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n1)
		WPDBUSER=$(echo $REPLACEDOT | cut -c1-16 | sed "s/.\{10\}$/$RANDOM_CHARACTER/")

		#echo -e "\033[31mERROR 1470 (HY000): $WPDBUSER Is Too Long For MySQL Username\e[0m"
		# Turn Off Echo For Passwords
		#stty echo
		#read -p "Enter The MySQL Database Username [$REPLACEDOT16]: " WPDBUSER

		#if [[ $WPDBUSER = "" ]]
		#then
		#	WPDBUSER=$REPLACEDOT16
		#fi

	fi

}

EECREATEDATABASE()
{
	# Create Database
	mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "create database \`$WPDBNAME\`" \
	|| OwnError "Unable To Create $WPDBNAME Database"

	# Check Use Default DB User Or Custom DB User
	WPDBRANDOMPASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n1)
	grep customdbuser /etc/easyengine/ee.conf | grep -i true &>> /dev/null

	if [ $? -eq 0 ]
	then
		read -p "Enter The MySQL Database Username [$REPLACEDOT]: " WPDBUSER

		if [[ $WPDBUSER = "" ]]
		then
			WPDBUSER=$REPLACEDOT
		fi

		# Fix MySQL USER ERROR 1470 (HY000)
		FIXMYSQLUSER16
		
		# Turn Off Echo For Passwords
		stty -echo
		read -p "Enter The MySQL Database Password [$WPDBRANDOMPASS]: " WPDBPASS
		stty echo
		echo
	fi

	if [[ $WPDBUSER = "" ]]
	then
		WPDBUSER=$REPLACEDOT
		# Fix MySQL USER ERROR 1470 (HY000)
		FIXMYSQLUSER16
	fi

	if [[ $WPDBPASS = "" ]]
	then
		WPDBPASS=$WPDBRANDOMPASS
	fi

	# Create Separate User & Grant Permission
	echo -e "WPDBNAME = $WPDBNAME \nWPDBUSER = $WPDBUSER \nWPDBPASS = $WPDBPASS" &>> $INSTALLLOG
	mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "create user '$WPDBUSER'@'$MYSQLHOST' identified by '$WPDBPASS'"
	mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "grant all privileges on \`$WPDBNAME\`.* to '$WPDBUSER'@'$MYSQLHOST'"
	mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "flush privileges"
}

PHPUSERINFO()
{
	# PHP User
	PHPUSER=$(grep ^user /etc/php-fpm.d/www.conf | cut -d'=' -f2 | cut -d' ' -f2) \
	|| OwnError "Unable To Find Out PHP Username"
}

EEINFO()
{
	# Nginx Information
	NGINXVER=$(nginx -v 2>&1 | cut -d':' -f2 | cut -d' ' -f2)
	NGINXUSER=$(grep ^user /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXPROCESSES=$(grep worker_processes /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXCONNECTIONS=$(grep worker_connections /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXKEEPALIVE=$(grep keepalive_timeout /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	FASTCGITIMEOUT=$(grep fastcgi_read_timeout /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	CLIENTMAXBODYSIZE=$(grep client_max_body_size /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXALLOWEDIPADD=$(grep ^allow /etc/nginx/common/acl.conf | cut -d' ' -f2 | cut -d';' -f1 | tr '\n' ' ')

	echo -e "\033[36mNginx ($NGINXVER) Information:\n\e[0m"
	echo -e "\033[36mNginx User:\t\t\t \033[37m$NGINXUSER\e[0m"
	echo -e "\033[36mNginx worker_processes:\t\t \033[37m$NGINXPROCESSES\e[0m"
	echo -e "\033[36mNginx worker_connections:\t \033[37m$NGINXCONNECTIONS\e[0m"
	echo -e "\033[36mNginx keepalive_timeout:\t \033[37m$NGINXKEEPALIVE\e[0m"
	echo -e "\033[36mNginx fastcgi_read_timeout:\t \033[37m$FASTCGITIMEOUT\e[0m"
	echo -e "\033[36mNginx client_max_body_size:\t \033[37m$CLIENTMAXBODYSIZE\e[0m"
	echo -e "\033[36mNginx Allowed IP Address:\t \033[37m$NGINXALLOWEDIPADD\e[0m"

	# PHP Information
	# Collect Information From php.ini
	PHPUSERINFO
	PHPVER=$(php -v | head -n1 | cut -d' ' -f2 | cut -d'+' -f1)
	PHPMEM=$(grep ^memory_limit /etc/php.ini | awk '{print $3}')
	PHPEXPOSE=$(grep ^expose_php /etc/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPPOSTMAXSIZE=$(grep post_max_size /etc/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPUPLOADMAXFSIZE=$(grep upload_max_filesize /etc/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPMAXEXECUTIONTIME=$(grep max_execution_time /etc/php.ini | cut -d'=' -f2 | cut -d' ' -f2)

	# Collect Information From www.conf
	PHPPINGPATH=$(grep ^ping.path /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPSTATUSPATH=$(grep ^pm.status_path /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPFPMPROCESS=$(grep "^pm =" /etc/php-fpm.d/www.conf | awk '{print $3}')
	PMMAXREQUEST=$(grep ^pm.max_requests /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMAXCHILDREN=$(grep ^pm.max_children /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMSTARTSERVERS=$(grep ^pm.start_servers /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMINSPARESERVERS=$(grep ^pm.min_spare_servers /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMAXSPARESERVERS=$(grep ^pm.max_spare_servers /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPREQUESTTERMINATE=$(grep ^request_terminate_timeout /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPFASTCGIREQUEST=$(grep ^listen /etc/php-fpm.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)

	echo -e "\033[36m\n\nPHP ($PHPVER) Information:\n\e[0m"
	echo -e "\033[36mPHP User:\t\t\t \033[37m$PHPUSER\e[0m"
	echo -e "\033[36mPHP expose_php:\t\t\t \033[37m$PHPEXPOSE\e[0m"
	echo -e "\033[36mPHP memory_limit:\t\t \033[37m$PHPMEM\e[0m"
	echo -e "\033[36mPHP post_max_size:\t\t \033[37m$PHPPOSTMAXSIZE\e[0m"
	echo -e "\033[36mPHP upload_max_filesize:\t \033[37m$PHPUPLOADMAXFSIZE\e[0m"
	echo -e "\033[36mPHP max_execution_time:\t\t \033[37m$PHPMAXEXECUTIONTIME\n\e[0m"

	echo -e "\033[36mPHP ping.path:\t\t\t \033[37m$PHPPINGPATH\e[0m"
	echo -e "\033[36mPHP pm.status_path:\t\t \033[37m$PHPSTATUSPATH\e[0m"
	echo -e "\033[36mPHP process manager:\t\t \033[37m$PHPFPMPROCESS\e[0m"
	echo -e "\033[36mPHP pm.max_requests:\t\t \033[37m$PMMAXREQUEST\e[0m"
	echo -e "\033[36mPHP pm.max_children:\t\t \033[37m$PMMAXCHILDREN\e[0m"
	echo -e "\033[36mPHP pm.start_servers:\t\t \033[37m$PMSTARTSERVERS\e[0m"
	echo -e "\033[36mPHP pm.min_spare_servers:\t \033[37m$PMMINSPARESERVERS\e[0m"
	echo -e "\033[36mPHP pm.max_spare_servers:\t \033[37m$PMMAXSPARESERVERS\e[0m"
	echo -e "\033[36mPHP request_terminate_timeout:\t \033[37m$PHPREQUESTTERMINATE\e[0m"
	echo -e "\033[36mPHP Fastcgi Listen:\t\t \033[37m$PHPFASTCGIREQUEST\e[0m"

	# MySQL Information
	MYSQLVER=$(mysql -V | awk '{print($5)}' | cut -d ',' -f1)
	MYSQLUSER=$(grep ^user /etc/my.cnf | awk '{print($3)}')
	MYSQLPORT=$(mysql -e "show variables" | grep ^port | awk '{print($2)}')
	MYSQLSOCKET=$(mysql -e "show variables" | grep "^socket" | awk '{print($2)}')
	MYSQLDATADIR=$(mysql -e "show variables" | grep datadir | awk '{print($2)}')
	MYSQLWAITTIMEOUT=$(mysql -e "show variables" | grep ^wait_timeout | awk '{print($2)}')
	MYSQLINTERACTIVE=$(mysql -e "show variables" | grep ^interactive_timeout | awk '{print($2)}')
	MYSQLMAXCONNECTION=$(mysql -e "show variables" | grep "^max_connections" | awk '{print($2)}')
	MYSQLMAXUSEDCONNECTION=$(mysql -e "show global status" | grep Max_used_connections | awk '{print($2)}')

	echo -e "\033[36m\n\nMySQL ($MYSQLVER) Information:\n\e[0m"
	echo -e "\033[36mMySQL User:\t\t\t \033[37m$MYSQLUSER\e[0m"
	echo -e "\033[36mMySQL port:\t\t\t \033[37m$MYSQLPORT\e[0m"
	echo -e "\033[36mMySQL wait_timeout:\t\t \033[37m$MYSQLWAITTIMEOUT\e[0m"
	echo -e "\033[36mMySQL interactive_timeout:\t \033[37m$MYSQLINTERACTIVE\e[0m"
	echo -e "\033[36mMySQL Max_used_connections:\t \033[37m$MYSQLMAXUSEDCONNECTION/$MYSQLMAXCONNECTION\e[0m"
	echo -e "\033[36mMySQL datadir:\t\t\t \033[37m$MYSQLDATADIR\e[0m"
	echo -e "\033[36mMySQL socket:\t\t\t \033[37m$MYSQLSOCKET\e[0m"

	# Common Locations:
	echo -e "\033[36m\n\nEasyEngine ($(ee version| awk '{print $3}')) Common Locations:\n\e[0m"
	echo -e "\033[36mPHP Status:\t\t\t \033[37mhttp://example.com/status\e[0m"
	echo -e "\033[36mNginx Status:\t\t\t \033[37mhttp://example.com/nginx_status\e[0m"
	echo -e "\033[36mEasyEngine Log File:\t\t \033[37m/var/log/easyengine/install.log\e[0m"
	echo -e "\033[36mEasyEngine Configuration File:\t \033[37m/etc/easyengine/ee.conf\e[0m"

}

EESITEINFO()
{
	# Display The Specific Site Configuration
	SITESTATUS=$(ls /etc/nginx/conf.d/$DOMAIN.conf &> /dev/null && echo Enable || echo Disable)
	SITEINFO=$(head -n1 /etc/nginx/conf.d/$DOMAIN.conf | grep "NGINX CONFIGURATION" | rev | cut -d' ' -f3,4,5,6,7 | rev | cut -d ' ' -f2,3,4,5)
	ACCESSLOG=$(grep access_log /etc/nginx/conf.d/$DOMAIN.conf | grep "/var/log/nginx/" | awk '{print($2)}' | cut -d ';' -f1)
	ERRORLOG=$(grep error_log /etc/nginx/conf.d/$DOMAIN.conf | grep "/var/log/nginx/" | awk '{print($2)}' | cut -d ';' -f1)
	WEBROOT=$(grep root /etc/nginx/conf.d/$DOMAIN.conf | grep htdocs | awk '{print($2)}'  | cut -d ';' -f1)
	WPDBNAME=$(grep DB_NAME /var/www/$DOMAIN/wp-config.php 2> /dev/null | cut -d"'" -f4)

	echo -e "\033[36m$DOMAIN Information:\n\e[0m"
	echo -e "\033[36mNginx Configuration:\t\t \033[37m$SITEINFO ($SITESTATUS)\e[0m"
	echo -e "\033[36mNginx access_log:\t\t \033[37m$ACCESSLOG\e[0m"
	echo -e "\033[36mNginx error_log:\t\t \033[37m$ERRORLOG\e[0m"
	echo -e "\033[36mNginx root:\t\t\t \033[37m$WEBROOT\e[0m"
	echo -e "\033[36m$DOMAIN Database:\t\t \033[37m$WPDBNAME\e[0m"
}

EESITEEDIT()
{
	# Open Website In Default Editor
	sensible-editor /etc/nginx/conf.d/$DOMAIN 2> /dev/null
}

NGINXBUCKETSIZE()
{
	nginx -t 2>&1 | grep server_names_hash_bucket_size &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		NGINXCALCULATION=$(echo "l($(ls /etc/nginx/conf.d/ | wc -c))/l(2)+2" | bc -l)
		NGINXSETBUCKET=$(echo "2^$NGINXCALCULATION" | bc -l 2> /dev/null)
		sed -i "s/.*server_names_hash_bucket_size.*/\tserver_names_hash_bucket_size $NGINXSETBUCKET;/" /etc/nginx/nginx.conf		
	fi
}

NGINXSTART ()
{
	# Check Nginx server_names_hash_bucket_size Value
	NGINXBUCKETSIZE

	# Start Nginx Service
	echo -e "\033[36mStarting Nginx Service, Please Wait...\e[0m"
	(nginx -t && service nginx start) &>> $INSTALLLOG || OwnError "Unable To Start Nginx"
}

NGINXRELOAD()
{
	# Check Nginx server_names_hash_bucket_size Value
	NGINXBUCKETSIZE

	# Reload Nginx Service
	echo -e "\033[36mReloading Nginx Service, Please Wait...\e[0m"
	(nginx -t && service nginx reload) &>> $INSTALLLOG || OwnError "Unable To Reload Nginx"
}

NGINXRESTART()
{
	# Check Nginx server_names_hash_bucket_size Value
	NGINXBUCKETSIZE

	# Test & Restart Nginx Service
	echo -e "\033[36mRestarting Nginx Service, Please Wait...\e[0m"
	(nginx -t && service nginx restart) &>> $INSTALLLOG || OwnError "Unable To Restart Nginx"
}

PHPSTART()
{
	# Start php-FPM Service
	echo -e "\033[36mStarting php-FPM Service, Please Wait...\e[0m"
	(php-fpm -t && service php-fpm start) &>> $INSTALLLOG || OwnError "Unable To Start php-FPM"
}

PHPRELOAD()
{
	# Reload php-FPM Service
	echo -e "\033[36mReloading php-FPM Service, Please Wait...\e[0m"
	(php-fpm -t && service php-fpm reload) &>> $INSTALLLOG || OwnError "Unable To Reloading php-FPM"
}

PHPRESTART()
{
	# Restart php-FPM Service
	echo -e "\033[36mRestarting php-FPM Service, Please Wait...\e[0m"
	(php-fpm -t && service php-fpm restart) &>> $INSTALLLOG || OwnError "Unable To Restart php-FPM"
}

MYSQLSTART()
{
	# Start MySQL Service
	echo -e "\033[36mStarting MySQL Service, Please Wait...\e[0m"
	service mysqld start &>> $INSTALLLOG || OwnError "Unable To Start MySQL"
}

MYSQLRELOAD()
{
	# Reload MySQL Service
	echo -e "\033[36mReloading MySQL Service, Please Wait...\e[0m"
	service mysqld reload &>> $INSTALLLOG || OwnError "Unable To Reloading MySQL"
}

MYSQLRESTART()
{
	# Restart MySQL Service
	echo -e "\033[36mRestarting MySQL Service, Please Wait...\e[0m"
	service mysqld restart &>> $INSTALLLOG || OwnError "Unable To Restart MySQL"
}

POSTFIXSTART()
{
	# Start Postfix Service
	echo -e "\033[36mStarting Postfix Service, Please Wait...\e[0m"
	service postfix start &>> $INSTALLLOG || OwnError "Unable To Start Postfix"
}

POSTFIXRELOAD()
{
	# Reload Postfix Service
	echo -e "\033[36mReloading Postfix Service, Please Wait...\e[0m"
	service postfix reload &>> $INSTALLLOG || OwnError "Unable To Reloading Postfix"
}

POSTFIXRESTART()
{
	# Restart Postfix Service
	echo -e "\033[36mRestarting Postfix Service, Please Wait...\e[0m"
	service postfix restart &>> $INSTALLLOG || OwnError "Unable To Restart Postfix"
}



# EE Domain Functions
EESITENAME()
{
	# Check SITENAME Is Empty Or Not
	if [ -z "$SITENAMECHECK" ]
	then
		# Ask Users To Enter Domain Name
		read -p "Enter Domain Name: " SITENAMECHECK
		# Remove http://  https:// & www.
		DOMAIN=$(echo $SITENAMECHECK | tr 'A-Z' 'a-z' |  sed "s'http://''" | sed "s'https://''" | sed "s'www.''" | sed "s'/''")
	else
		# Remove http://  https:// & www.
		DOMAIN=$(echo $SITENAMECHECK | tr 'A-Z' 'a-z' |  sed "s'http://''" | sed "s'https://''" | sed "s'www.''" | sed "s'/''")
	fi

	# Remove http://  https:// For WordPress Setup (www.example.com)
	WWWDOMAIN=$(echo $SITENAMECHECK | tr 'A-Z' 'a-z' |  sed "s'http://''" | sed "s'https://''" | sed "s'/''")
}



EEDOMAINSETUP()
{
	#Check The Nginx Configuration Exist For $DOMAIN
	ls /etc/nginx/conf.d/$DOMAIN.conf &> $ERRORLOG

	if [ $? -ne 0 ]
	then
		# Creating Website $DOMAIN
		echo -e "\033[36mCreating $DOMAIN, Please Wait...\e[0m"
		sed "s/example.com/$DOMAIN/g" \
		/usr/share/easyengine/nginx/$NGINXCONF \
		> /etc/nginx/conf.d/$DOMAIN.conf \
		|| OwnError "Unable To Create Nginx Configuration File For $DOMAIN"

		# Creating Htdocs & Logs Directory
		echo -e "\033[36mCreating htdocs & logs Directory\e[0m"
		mkdir -p /var/www/$DOMAIN/htdocs && mkdir -p /var/log/nginx/$DOMAIN/logs \
		|| OwnError "Unable To Create htdocs & logs Directory"
	else
		OwnError "$DOMAIN Already Exist"
	fi
}

EEWPSETUP()
{
	# Download Latest WordPress
	echo -e "\033[36mDownloading WordPress, Please Wait...\e[0m"
	wget --no-check-certificate -cqO /var/www/$DOMAIN/htdocs/latest.tar.gz  \
	http://wordpress.org/latest.tar.gz \
	|| OwnError "Unable To Download WordPress"

	# Extracting WordPress
	tar --strip-components=1 -zxf /var/www/$DOMAIN/htdocs/latest.tar.gz \
	-C /var/www/$DOMAIN/htdocs/ \
	|| OwnError "Unable To Extract WordPress"

	# Removing WordPress Archive
	rm /var/www/$DOMAIN/htdocs/latest.tar.gz

	# Call MYSQLINFO Function For MySQL Values
	MYSQLINFO
	EEWPDBPREFIX
	EECREATEDATABASE

	# Modify wp-config.php & Move Outside The Webroot
	cp /var/www/$DOMAIN/htdocs/wp-config-sample.php \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/database_name_here/$WPDBNAME/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/username_here/$WPDBUSER/" \
	/var/www/$DOMAIN/wp-config.php
				
	sed -i "s/password_here/$WPDBPASS/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/localhost/$MYSQLHOST/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/wp_/$WPDBPREFIX/" \
	/var/www/$DOMAIN/wp-config.php

	printf '%s\n' "g/put your unique phrase here/d" \
	a "$(curl -sL https://api.wordpress.org/secret-key/1.1/salt/)" . w \
	| ed -s /var/www/$DOMAIN/wp-config.php
}

EEWPDBSETUP()
{
	# Get WordPress Site Title
	#echo -e "\033[36mWordPress Information Required...\e[0m"

	# WordPress Default User: admin
	WPADMINUSER=$(grep wpadminuser /etc/easyengine/ee.conf | awk '{print($3)}')
	if [[ $WPADMINUSER = "" ]]
	then
		read -p "Enter admin account username: " WPADMINUSER
	fi

	# WordPress Default Password: Random Password
	WPADMINPASS=$(grep wpadminpass /etc/easyengine/ee.conf | awk '{print($3)}')
	if [[ $WPADMINPASS = "" ]]
	then
		WPADMINPASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n1)
	fi
	
	# WordPress Default Email: `git config user.email`
	WPADMINEMAIL=$(grep wpadminemail /etc/easyengine/ee.conf | awk '{print($3)}')
	if [[ $WPADMINEMAIL = "" ]]
	then
		read -p "Enter admin account email address: " WPADMINEMAIL
		
	fi

	# Create WordPress Tables
	echo -e "\033[36mSetting Up WordPress, Please Wait...\e[0m"
	cd /var/www/$DOMAIN/htdocs || OwnError "Unable To Change Directory To Install WordPress"
	wp core install --allow-root  --url=$WWWDOMAIN --title="$WWWDOMAIN" \
	--admin_name=$WPADMINUSER --admin_password=$WPADMINPASS --admin_email=$WPADMINEMAIL &>> $INSTALLLOG \
	|| OwnError "Unable To Create WordPress Tables For $DOMAIN"
	
	# Update WordPress Permalink Structure Day and Postname
	echo -e "\033[36mUpdating WordPress Permalink, Please Wait...\e[0m"
	wp rewrite structure --allow-root /%year%/%monthnum%/%day%/%postname%/ &>> $INSTALLLOG \
	|| OwnError "Unable To Update WordPress Permalink For $DOMAIN"
}

EEPERMISSION()
{
	# Call PHPUSERINFO Function For PHP User Details
	PHPUSERINFO

	# Change Ownership
	echo -e "\033[36mChanging Ownership\e[0m"
	chown -R $PHPUSER:$PHPUSER /var/www/$DOMAIN/ || OwnError "Unable To Change Ownership For $DOMAIN"

	# Reload Nginx Configuration
	NGINXRELOAD
}


# NGINX Configuration Function
SETUPDOMAIN()
{
	# Check SITENAME Is Empty Or Not
	EESITENAME

	# Creating Website $DOMAIN
	EEDOMAINSETUP

	# Setup WordPress Webroot & Database
	EEWPSETUP
	EEWPDBSETUP
}

PERMISSIONANDGIT()
{
	# Change Webroot Permission
	EEPERMISSION

	# Take Nginx Configuration In Git Version Control
	EEGITDIR=/etc/nginx
	EEGITMESSAGE="Create Website With $WPNETWORKSITE $WPCACHEOPTION Option: $DOMAIN"
	
}

TOTALCACHENGINX()
{
	# Installing W3 Total Cache
	cd /var/www/$DOMAIN/htdocs/
	echo -e "\033[36mInstalling W3 Total Cache Plugin, Please Wait...\e[0m"
	wp plugin --allow-root install w3-total-cache &>> $INSTALLLOG || OwnError "Unable To Install W3 Total Cache Plugin"

	# Activate W3 Total Cache
	wp plugin --allow-root activate w3-total-cache $NETWORKACTIVATE &>> $INSTALLLOG || OwnError "Unable To Activate W3 Total Cache Plugin"
}

SUPERCACHENGINX()
{
	# Installing WP Super Cache
	cd /var/www/$DOMAIN/htdocs/
	echo -e "\033[36mInstalling WP Super Cache Plugin, Please Wait...\e[0m"
	wp plugin --allow-root install wp-super-cache &>> $INSTALLLOG || OwnError "Unable To Install WP Super Cache Plugin"

	# Activate WP Super Cache
	wp plugin --allow-root activate wp-super-cache $NETWORKACTIVATE &>> $INSTALLLOG || OwnError "Unable To Activate WP Super Cache Plugin"
}

NGINXHELPER()
{
	# Installing Nginx Helper
	cd /var/www/$DOMAIN/htdocs/
	echo -e "\033[36mInstalling Nginx Helper Plugin, Please Wait...\e[0m"
	wp plugin --allow-root install nginx-helper &>> $INSTALLLOG || OwnError "Unable To Install Nginx Helper"
	echo -e "\033[36mInstalling Wordfence Plugin, Please Wait...\e[0m"
	wp plugin --allow-root install wordfence &>> $INSTALLLOG || OwnError "Unable To Install Wordfence"
	echo -e "\033[36mInstalling EWWW Image Optimizer, Please Wait...\e[0m"
	wp plugin --allow-root install ewww-image-optimizer &>> $INSTALLLOG || OwnError "Unable To Install EWWW Image Optimizer"
	echo -e "\033[36mInstalling Jetpack, Please Wait...\e[0m"
	wp plugin --allow-root install jetpack &>> $INSTALLLOG || OwnError "Unable To Install Jetpack"

	# Activate Nginx Helper
	wp plugin --allow-root activate nginx-helper $NETWORKACTIVATE &>> $INSTALLLOG || OwnError "Unable To Activate Nginx Helper Plugin"
}


# Setup Wordpress Network
SETUPWPNETWORK()
{
	# Prepare wp-config.php File Foe WordPress Multisite With SubDirectory
	cd /var/www/$DOMAIN/htdocs || OwnError "Unable To Change Directory"
	wp core install-network --allow-root --title="$WWWDOMAIN" $WPSUBDOMAINS &>> $INSTALLLOG || OwnError "Unable To Setup WordPress SubDirectory Network"

	sed -i "/WP_DEBUG/a \define('WP_ALLOW_MULTISITE', true);" /var/www/$DOMAIN/wp-config.php
	sed -i "/WP_ALLOW_MULTISITE/a \define('WPMU_ACCEL_REDIRECT', true);" /var/www/$DOMAIN/wp-config.php
	
	# Remove index.php from permalink
	# Install Nginx Helper
	NGINXHELPER
}


# Remove Database
REMOVEDB()
{
	# HTML & PHP Website Doesn't Have Database
	head -n1 /etc/nginx/conf.d/$DOMAIN.conf | egrep -e 'HTML|PHP' &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# MySQL Information
		MYSQLROOT
		WPDBNAME=$(grep DB_NAME /var/www/$DOMAIN/*-config.php | cut -d"'" -f4)
		WPDBUSER=$(grep DB_USER /var/www/$DOMAIN/*-config.php | cut -d"'" -f4)
		WPDBPASS=$(grep DB_PASS /var/www/$DOMAIN/*-config.php | cut -d"'" -f4)
		MYSQLHOST=$(grep DB_HOST /var/www/$DOMAIN/*-config.php | cut -d"'" -f4)
		echo -e " WPDBNAME = $WPDBNAME \n WPDBUSER = $WPDBUSER \n MYSQLHOST = $MYSQLHOST"

		# Remove Database
		# For Proper read Command Output
		stty echo
		if [ "$1" = "no-prompt" ]
		then
			# Assume yes
			ANSWER="y"
		else
			# Ask user for confirmation
			read -p "Are You Sure To Drop $WPDBNAME Database (y/n): " ANSWER
		fi

		if [ "$ANSWER" = "y" ]
		then 
		#added to get root user to drop wp user from mysql
		read -p "Enter The MySQL Username [root]: " MYSQLUSER
			# If Enter Is Pressed, Then Use root as MySQL User
			if [[ $MYSQLUSER = "" ]]
			then
				MYSQLUSER=root
			fi

			# Turn Off Echo For Passwords
			stty -echo
			read -p "Enter The MySQL Password: " MYSQLPASS
			stty echo
			echo
			
			# Remove Database
			mysqladmin -h $MYSQLHOST -u $WPDBUSER -p$WPDBPASS drop $WPDBNAME || OwnError "Unable To Drop $WPDBNAME Database"

			# Never Remove root User
			if [ "$WPDBUSER" != "root" ]
			then
				# Remove Database User
				mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "drop user '$WPDBUSER'@'$MYSQLHOST'" \
				|| OwnError "Unable To Drop Database User $WPDBUSER"
				mysql -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS -e "flush privileges" \
				|| OwnError "Unable To Flush MySQL Privileges"
			fi
		else
			# User Denied Messages
			echo -e "\033[31mUser Denied To Drop $WPDBNAME Database.\e[0m"
		fi
	else
		echo -e "\033[31mNo Database Found For $DOMAIN\e[0m"
	fi
}

REMOVEFILES()
{
	# Remove Webroot
	# For Proper read Command Output
	stty echo
	if [ "$1" = "no-prompt" ]
	then
		# Assume yes
		ANSWER="y"
	else
		# Ask user for confirmation
		read -p "Are You Sure To Remove $DOMAIN Webroot (y/n): " ANSWER
	fi

	if [ "$ANSWER" = "y" ]
	then
		# Remove Webroot
		rm -rf /var/www/$DOMAIN	|| OwnError "Unable To Remove $DOMAIN Webroot"
	else
		# User Denied Messages
		echo -e "\033[31mUser Denied To Remove $DOMAIN Webroot.\e[0m"
	fi
}

REMOVENGINXCONF()
{
	# Remove Nginx Configuration
	# For Proper read Command Output
	stty echo
	if [ "$1" = "no-prompt" ]
	then
		# Assume yes
		ANSWER="y"
	else
		# Ask user for confirmation
		read -p "Are You Sure To Remove $DOMAIN Nginx Configuration (y/n): " ANSWER
	fi
	if [ "$ANSWER" = "y" ]
	then
		# Remove Webroot
		rm -rf /etc/nginx/conf.d/$DOMAIN.conf || OwnError "Unable To Remove $DOMAIN Nginx Configuration"
	else
		# User Denied Messages
		echo -e "\033[31mUser Denied To Remove $DOMAIN Nginx Configuration.\e[0m"
	fi
}

DEBUG_NGINX()
{
	# Lets Disable Nginx Reload Trigger
	EE_DEBUG_NGINX=""

	if [ -z "$EE_IP_ADDRESS" ]
	then
		#read -p "Enter The Single IP Address For Debugging: " EE_IP_ADDRESS
		EE_IP_ADDRESS="0.0.0.0/0"
	fi

	for DEBUG_IP_ADDRESS in $(echo $EE_IP_ADDRESS)
	do
		grep "debug_connection $DEBUG_IP_ADDRESS" /etc/nginx/nginx.conf &>> $INSTALLLOG
		if [ $? -ne 0 ]
		then
			# Enable Debug Connection
			echo -e "\033[36mSetting Up Nginx Debug Connection, Please Wait...\e[0m"

			# EasyEngine Found New IP Address Which Is Not Present In nginx.conf
			sed -i "/events {/a \\\t$(echo debug_connection $DEBUG_IP_ADDRESS\;)" /etc/nginx/nginx.conf

			# Lets Trigger The Nginx Reload
			EE_DEBUG_NGINX="--nginx"
       	fi
	done

	if [ -z "$EE_DEBUG_NGINX" ]
	then
		echo -e "\033[36mNginx Debug Connection Already Enabled\e[0m"
	fi
}

DEBUG_NGINX_STOP()
{
	grep "debug_connection" /etc/nginx/nginx.conf &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		echo -e "\033[36mStopping Nginx Debug Connection, Please Wait...\e[0m"
		sed -i "/debug_connection.*/d" /etc/nginx/nginx.conf
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_NGINX=""
		echo -e "\033[36mNginx Debug Connection Already Stopped\e[0m"
	fi
}

DEBUG_NGINX_REWRITE()
{
	grep "rewrite_log on;" /etc/nginx/nginx.conf &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# Enable Nginx Rewrite Logs
		echo -e "\033[36mSetting Up Nginx Rewrite Logs, Please Wait...\e[0m"
		sed -i '/http {/a \\trewrite_log on;' /etc/nginx/nginx.conf
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_REWRITE=""
		echo -e "\033[36mNginx Rewrites Logs Already ON\e[0m"
	fi
}

DEBUG_NGINX_REWRITE_STOP()
{
	grep "rewrite_log on;" /etc/nginx/nginx.conf &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		# Disable Nginx Rewrite Logs
		echo -e "\033[36mStopping Nginx Rewrite Logs, Please Wait...\e[0m"
		sed -i "/rewrite_log.*/d" /etc/nginx/nginx.conf
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_REWRITE=""
		echo -e "\033[36mNginx Rewrites Logs Already STOP\e[0m"
	fi
}

DEBUG_NGINX_SITE()
{
	grep "error.log debug" /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# Enable Nginx Debug Log
		echo -e "\033[36mSetting Up $DOMAIN Error Logs In Debugging Mode,Please Wait...\e[0m"
		sed -i "s/error.log;/error.log debug;/" /etc/nginx/conf.d/$DOMAIN
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_NGINX=""
		echo -e "\033[36mAlready Started $DOMAIN Error Logs In Debugging Mode\e[0m"
	fi
}

DEBUG_NGINX_SITE_STOP()
{
	grep "error.log debug" /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		# Disable Nginx Debug Log
		echo -e "\033[36mDisable $DOMAIN Error Logs In Debugging Mode,Please Wait...\e[0m"
		sed -i "s/error.log debug;/error.log;/" /etc/nginx/conf.d/$DOMAIN
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_NGINX=""
		echo -e "\033[36mAlready Stopped $DOMAIN Error Logs In Debugging Mode\e[0m"
	fi
}

DEBUG_NGINX_REWRITE_SITE()
{
	grep "rewrite_log on;" /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# Enable Nginx Rewrite Logs
		echo -e "\033[36mSetting Up Nginx Rewrite Logs For $DOMAIN\e[0m"
		sed -i "/access_log/i \\\trewrite_log on;" /etc/nginx/conf.d/$DOMAIN
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_REWRITE=""
		echo -e "\033[36mRewrites Logs Already ON For $DOMAIN\e[0m"
	fi
}

DEBUG_NGINX_REWRITE_SITE_STOP()
{
	grep "rewrite_log on;" /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		# Disable Nginx Rewrite Logs
		echo -e "\033[36mStopping Up Nginx Rewrite Logs For $DOMAIN\e[0m"
		sed -i "/rewrite_log.*/d" /etc/nginx/conf.d/$DOMAIN
	else
		# Lets Disable Nginx Reload Trigger
		EE_DEBUG_REWRITE=""
		echo -e "\033[36mRewrites Logs Already Stop For $DOMAIN\e[0m"
	fi
}

DEBUG_PHP()
{
	#  Lets Disable PHP Restart Trigger
	EE_DEBUG_PHP=""

	if [ -z $EE_DEBUG_SITENAME ]
	then
		grep -B2 9001 /etc/nginx/conf.d/upstream.conf | grep php &>> $INSTALLLOG
		if [ $? -ne 0 ]
		then
			echo -e "\033[36mEnable php-FPM Slow Log, Please Wait...\e[0m"
			sed -i "4 s/9000/9001/" /etc/nginx/conf.d/upstream.conf

			# Lets Trigger The Nginx Reload
			EE_DEBUG_NGINX="--nginx"
		else
			echo -e "\033[36mphp-FPM Slow Log Already Enabled\e[0m"
		fi
	else
		grep 9001 /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
		if [ $? -ne 0 ]
		then
			echo -e "\033[36mEnable php-FPM Slow Log For $DOMAIN, Please Wait...\e[0m"
			sed -i "s/fastcgi_pass.*/fastcgi_pass debug;/g" /etc/nginx/conf.d/$DOMAIN

			# Lets Trigger The Nginx Reload
			EE_DEBUG_NGINX="--nginx"
		else
			echo -e "\033[36mphp-FPM Slow Log Already Enabled For $DOMAIN\e[0m"
		fi
	fi
}

DEBUG_PHP_STOP()
{
	#  Lets Disable PHP Restart Trigger
	EE_DEBUG_PHP=""

	if [ -z $EE_DEBUG_SITENAME ]
	then
		grep -B2 9001 /etc/nginx/conf.d/upstream.conf | grep php &>> $INSTALLLOG
		if [ $? -eq 0 ]
		then
			echo -e "\033[36mDisable php-FPM Slow Log, Please Wait...\e[0m"
			sed -i "4 s/9001/9000/" /etc/nginx/conf.d/upstream.conf
			
			# Lets Trigger The Nginx Reload
			EE_DEBUG_NGINX="--nginx"
		else
			echo -e "\033[36mphp-FPM Slow Log Already Disabled\e[0m"
		fi
	else
		grep "fastcgi_pass debug;" /etc/nginx/conf.d/$DOMAIN &>> $INSTALLLOG
		if [ $? -eq 0 ]
		then
			echo -e "\033[36mDisable php-FPM Slow Log For $DOMAIN, Please Wait...\e[0m"
			sed -i "s/fastcgi_pass.*/fastcgi_pass php;/g" /etc/nginx/conf.d/$DOMAIN

			# Lets Trigger The Nginx Reload
			EE_DEBUG_NGINX="--nginx"
		else
			echo -e "\033[36mphp-FPM Slow Log Already Disabled For $DOMAIN\e[0m"
		fi
	fi
}

DEBUG_PHP_FPM()
{
	grep "log_level = debug" /etc/php-fpm.conf &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# Enable php-FPM Error Logs In Debug Mode
		echo -e "\033[36mSetting Up php-FPM Log Level In Debug Mode, Please Wait...\e[0m"
		sed -i "s';log_level.*'log_level = debug'" /etc/php-fpm.conf
	else
		EE_DEBUG_FPM=""
		echo -e "\033[36mphp-FPM Log Level Is Already In Debug Mode\e[0m"
	fi
}

DEBUG_PHP_FPM_STOP()
{
	grep "log_level = notice" /etc/php-fpm.conf &>> $INSTALLLOG
	if [ $? -ne 0 ]
	then
		# Disable php-FPM Error Logs In Debug Mode
		echo -e "\033[36mStopping php-FPM Log Level In Debug Mode, Please Wait...\e[0m"
		sed -i "s/log_level = debug/log_level = notice/" /etc/php-fpm.conf
	else
		EE_DEBUG_FPM=""
		echo -e "\033[36mphp-FPM Log Level Already In Notice (Default) Mode\e[0m"
	fi
}

DEBUG_MYSQL()
{
	# Collect MySQL Login Details
	MYSQLROOT

	# Check MySql Slow Logs Is ON
	#grep slow-query-log /etc/my.cnf &>> $INSTALLLOG
	mysql -u $MYSQLUSER -p$MYSQLPASS -e "show variables like 'slow_query_log';" | grep ON &>> $INSTALLLOG

	if [ $? -ne 0 ]
	then
		# Enable MySQL Slow Logs
		echo -e "\033[36mSetting Up MySQL Slow Log, Please Wait...\e[0m"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global slow_query_log = 'ON';"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global slow_query_log_file = '/var/log/mysql/slow.log';"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global long_query_time=2;"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global log_queries_not_using_indexes = 'ON';"
		#sed -i "/#long_query_time/i slow-query-log = 1\nslow-query-log-file = /var/log/mysql/slow.log" /etc/my.cnf
		#sed -i "s/#long_query_time/long_query_time/" /etc/my.cnf
		#sed -i "s/#log-queries-not-using-indexes/log-queries-not-using-indexes/" /etc/my.cnf
	else
		# Lets Disable MySQL Restart Trigger
		#EE_DEBUG_MYSQL=""
		echo -e "\033[36mMySQL Slow Log Already Enabled\e[0m"
	fi
}

DEBUG_MYSQL_STOP()
{
	# Collect MySQL Login Details
	MYSQLROOT

	# Check MySql Slow Logs Is OFF
	#grep slow-query-log /etc/my.cnf &>> $INSTALLLOG
	mysql -u $MYSQLUSER -p$MYSQLPASS -e "show variables like 'slow_query_log';" | grep ON &>> $INSTALLLOG
	
	if [ $? -eq 0 ]
	then
		# Disable MySQL Slow Logs
		echo -e "\033[36mStopping MySQL Slow Log, Please Wait...\e[0m"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global slow_query_log = 'OFF';"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global slow_query_log_file = '/var/log/mysql/slow.log';"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global long_query_time=10;"
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "set global log_queries_not_using_indexes = 'OFF';"
		#sed -i "/slow-query-log/d" /etc/my.cnf
		#sed -i "s/long_query_time/#long_query_time/" /etc/my.cnf
		#sed -i "s/log-queries-not-using-indexes/#log-queries-not-using-indexes/" /etc/my.cnf
	else
		# Lets Disable MySQL Restart Trigger
		#EE_DEBUG_MYSQL=""
		echo -e "\033[36mMySQL Slow Log Already Disable\e[0m"
	fi
}

DEBUG_WORDPRESS()
{
	if [ -e /var/www/$DOMAIN/wp-config.php ]
	then

		grep "'WP_DEBUG'" /var/www/$DOMAIN/wp-config.php | grep true &>> $INSTALLLOG
		if [ $? -ne 0 ]
		then
			# Debug WordPress
			echo -e "\033[36mStart WordPress Debug Logs For $DOMAIN\e[0m"

			# Call PHPUSERINFO Function For PHP User Details
			PHPUSERINFO

			# Create debug.log & Change Permission
			touch /var/www/$DOMAIN/htdocs/wp-content/debug.log
			chown $PHPUSER:$PHPUSER /var/www/$DOMAIN/htdocs/wp-content/debug.log
		
			# Turn On Debug
			sed -i "s/define('WP_DEBUG'.*/define('WP_DEBUG', true);\ndefine('WP_DEBUG_DISPLAY', false);\ndefine('WP_DEBUG_LOG', true);\ndefine('SAVEQUERIES', true);/" /var/www/$DOMAIN/wp-config.php

			# Install Developer Plugin
			# Installing Nginx Helper
			cd /var/www/$DOMAIN/htdocs/
			echo -e "\033[36mInstalling Developer Plugin, Please Wait...\e[0m"
			wp plugin --allow-root install developer &>> $INSTALLLOG || OwnError "Unable To Install Developer Plugin"

		else
			echo -e "\033[36mWordPress Debug Log Already Started For $DOMAIN\e[0m"
		fi
	else
		echo -e "\033[31mUnable To Find wp-config.php File, Seems Like Not WordPress Site\e[0m"
	fi
}

DEBUG_WORDPRESS_STOP()
{
	grep "'WP_DEBUG'" /var/www/$DOMAIN/wp-config.php | grep true &>> $INSTALLLOG
	if [ $? -eq 0 ]
	then
		# Stop Debug WordPress
		echo -e "\033[36mStopping WordPress Debug Logs For $DOMAIN\e[0m"
		sed -i "s/define('WP_DEBUG', true);/define('WP_DEBUG', false);/" /var/www/$DOMAIN/wp-config.php
		sed -i "/define('WP_DEBUG_DISPLAY', false);/d" /var/www/$DOMAIN/wp-config.php
		sed -i "/define('WP_DEBUG_LOG', true);/d" /var/www/$DOMAIN/wp-config.php
		sed -i "/define('SAVEQUERIES', true);/d" /var/www/$DOMAIN/wp-config.php
	else
		echo -e "\033[36mWordPress Debug Log Already Stopped For $DOMAIN\e[0m"
	fi
}

DEBUG_KILL()
{
	if [ "$EE_DEBUG" = "--start" ]
	then
		if [ -z "$EE_DEBUG_SITENAME" ]
		then
			ee debug --stop
		else
			ee debug --stop $EE_DEBUG_SITENAME
		fi
	fi

	# Unset Trap So We Don't Get Infinate Loop
	trap - EXIT

	# Flush File System Buffers
	# More Details: info coreutils 'sync invocation'
	sync

	# Successfull Exit
	exit 0;
}
trap "DEBUG_KILL" EXIT

DEBUG_INTERACTIVE()
{
	if [ -z "$EE_DEBUG_SITENAME" ]
	then
		tail -f /var/log/nginx/*.error.log /var/log/php/*.log /var/log/mysql/*.log
	else
		tail -f /var/log/nginx/*.error.log /var/log/php/*.log /var/log/mysql/*.log /var/www/$DOMAIN/htdocs/wp-content/debug.log
	fi
}


# Easy Engine Version
if [ "$1" = "version" ] || [ "$1" = "--version" ] || [ "$1" = "-v" ]
then

	# Display Easy Engine Version
	echo "easyengine version: 1.3.7"

# Easy Engine Info
elif [ "$1" = "info" ]
then

		# Get Nginx PHP & MySQL Information
		EEINFO

# Easy Engine Help
elif [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]
then

	# Display Man Pages
	man ee


# Easy Engine System Settings
elif [ "$1" = "system" ]
then

	# Easy Engine Install
	if [ "$2" = "install" ]
	then

		# Check Auto Assume Yes Or No To Apt-Get
		APTASSUMEYES

		if [ "$3" = "nginx" ]
		then
			NGINXREPO
			
			# Personal Settings For Nginx
			COMMONNGINX

			# Restart Nginx To Take Effect Of COMMONNGINX Functions
			NGINXRESTART

			# Display Success Message
			echo -e "\033[36mNginx Successfully Installed\e[0m"

		elif [ "$3" = "php" ]
		then

			# Add PHP Launchpad Repository
			EPELREPO

			# Install php
			INSTALLPHP

			# Personal Settings For PHP
			COMMONPHP

			# Restart PHP To Take Effect Of COMMONPHP Functions
			PHPRESTART
			
			# Install WP-CLI & PHP Packages
			WP-CLI
			PHP_PACKAGES

			# Display Success Message
			echo -e "\033[36mphp & WP-CLI Successfully Installed\e[0m"

		elif [ "$3" = "mysql" ]
		then
			# Install MySQL
			INSTALLMYSQL

			# Personal Settings For MySQL
			COMMONMYSQL

			# Restart MySQL
			MYSQLRESTART

			# Display Success Message
			echo -e "\033[36mMySQL Successfully Installed\e[0m"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then
            # Add Nginx  Repository
			NGINXREPO
			
			# Add EPEL Repository
			EPELREPO

			# Install Nginx php MySQL Postfix
			INSTALLALL

			# Personal Settings For Nginx
			COMMONNGINX

			# Reload Nginx To Take Effect Of COMMONNGINX Functions
			NGINXRESTART

			# Personal Settings For PHP
			COMMONPHP

			# Restart PHP To Take Effect Of COMMONPHP Functions
			PHPRESTART

			# Install WP-CLI & PHP Packages
			WP-CLI
			PHP_PACKAGES

			# Personal Settings For MySQL
			COMMONMYSQL

			# Restart MySQL
			MYSQLRESTART

			# Display Success Message
			echo -e "\033[36mNginx php-fpm WP-CLI MySQL Successfully Installed\e[0m"
			echo -e "\033[36mYou Can Now Create Your First WordPress Site Powered By Nginx Using:\e[0m"
			echo -e "\033[37mee site create example.com --wp\e[0m"

		fi

	# Easy Engine Remove
	elif [ "$2" = "remove" ]
	then

		# Check Auto Assume Yes Or No To Apt-Get
		APTASSUMEYES
		
		if [ "$3" = "nginx" ]
		then

			# Remove Nginx
			REMOVENGINX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "\033[36mNginx Successfully Removed\e[0m"

		elif [ "$3" = "php" ]
		then

			# Remove php
			REMOVEPHP
			REMOVEWPCLI
			
			# Remove Unwanted Packages
			AUTOREMOVE
						
			# Display Success Message
			echo -e "\033[36mphp & WP-CLI Successfully Removed\e[0m"

		elif [ "$3" = "phpmyadmin" ]  || [ "$3" = "pma" ]
		then

			# Remove PMA/phpMyAdmin
			REMOVEPMA
			
			# Display Success Message
			echo -e "\033[36mphpMyAdmin Successfully Removed\e[0m"

		elif [ "$3" = "mysql" ]
		then

			# Remove MySQL
			REMOVEMYSQL
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "\033[36mMySQL Successfully Removed\e[0m"

		elif [ "$3" = "postfix" ]
		then

			# Remove Postfix
			REMOVEPOSTFIX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "\033[36mPostfix Successfully Removed\e[0m"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then

			# Remove Nginx php MySQL Postfix
			REMOVEALL
			
			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "\033[36mNginx php WP-CLI MySQL Postfix phpMyAdmin Successfully Removed\e[0m"

		fi

	# Easy Engine Purge
	elif [ "$2" = "purge" ]
	then

		# Check Auto Assume Yes Or No To Apt-Get
		APTASSUMEYES
		
		if [ "$3" = "nginx" ]
		then

			# Purge Nginx
			PURGENGINX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "\033[36mNginx Successfully Purged\e[0m"

		elif [ "$3" = "php" ]
		then

			# Purge php
			PURGEPHP
			REMOVEWPCLI
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "\033[36mphp & WP-CLI Successfully Purged\e[0m"

		elif [ "$3" = "phpmyadmin" ]  || [ "$3" = "pma" ]
		then

			# Purge PMA/phpMyAdmin
			REMOVEPMA
			
			# Display Success Message
			echo -e "\033[36mphpMyAdmin Successfully Purged\e[0m"

		elif [ "$3" = "mysql" ]
		then

			# Purge MySQL
			PURGEMYSQL
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "\033[36mMySQL Successfully Purged\e[0m"

		elif [ "$3" = "postfix" ]
		then

			# Purge Postfix
			PURGEPOSTFIX
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "\033[36mPostfix Successfully Purged\e[0m"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then

			# Purge Nginx php MySQL Postfix
			PURGEALL

			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "\033[36mNginx php WP-CLI MySQL Postfix phpMyAdmin Successfully Purged\e[0m"

		fi

	elif [ "$2" = "status" ]
	then
		# Call The System Status Function
		EE_SYSTEM_STATUS

	elif [ "$2" = "stop" ]
	then
		# Stop Nginx php-FPM MySQL & Postfix
		echo -e "\033[36mStopping Nginx Service, Please Wait...\e[0m"
		service nginx stop &>> $INSTALLLOG || OwnError "Unable To Stop Nginx"
		echo -e "\033[36mStopping php-FPM Service, Please Wait...\e[0m"
		service php-fpm stop &>> $INSTALLLOG || OwnError "Unable To Stop php-FPM"
		echo -e "\033[36mStopping MySQL Service, Please Wait...\e[0m"
		service mysql stop &>> $INSTALLLOG || OwnError "Unable To Stop MySQL"
		echo -e "\033[36mStopping Postfix Service, Please Wait...\e[0m"
		service postfix stop &>> $INSTALLLOG || OwnError "Unable To Stop Postfix"

	elif [ "$2" = "start" ]
	then
		# Start Nginx php-FPM MySQL & Postfix
		NGINXSTART
		PHPSTART
		MYSQLSTART
		POSTFIXSTART

	elif [ "$2" = "reload" ]
	then
		# Restart Nginx php-FPM MySQL & Postfix
		NGINXRELOAD
		PHPRELOAD
		MYSQLRELOAD
		POSTFIXRELOAD

	elif [ "$2" = "restart" ]
	then
		# Restart Nginx php-FPM MySQL & Postfix
		NGINXRESTART
		PHPRESTART
		MYSQLRESTART
		POSTFIXRESTART

	else
		echo -e "\033[36mList Of Available Commands:\e[0m"
		echo -e "\tstatus:\t Display The System Status Information"
		echo -e "\tstop:\t Stop Nginx php-FPM MySQL And Postfix Services"
		echo -e "\tstart:\t Start Nginx php-FPM MySQL And Postfix Services"
		echo -e "\treload:\t Reload Nginx php-FPM MySQL And Postfix Services"
		echo -e "\trestart: Restart Nginx php-FPM MySQL And Postfix Services"
		echo -e "\tpurge:\t Purge Nginx php-FPM phpMyAdmin MySQL And Postfix Packages"
		echo -e "\tremove:\t Remove Nginx php-FPM phpMyAdmin MySQL And Postfix Packages"
		echo -e "\tinstall: Install Nginx php-FPM phpMyAdmin MySQL And Postfix Packages"

	fi


# Easy Engine Site Settings
elif [ "$1" = "site" ]
then

	# Easy Engine Site Enabled List
	if [ "$2" = "list" ]
	then

		if [ "$3" = "available" ]
		then

			# Display The List Of Available Sites
			echo -e "\033[36mDisplay The List Of Available Websites:\e[0m"
			ls /etc/nginx/conf.d/ \
			|| OwnError "Unable To Display The List Of Available Websites"

		else
		
			# Display The List Of Enabled Websites
			echo -e "\033[36mDisplay The List Of Enabled Websites:\e[0m"
			ls /etc/nginx/conf.d/ \
			|| OwnError "Unable To Display The List Of Enabled Websites"
		fi

	elif [ "$2" = "show" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME
		
		# Check The Website Is Exist
		ls /etc/nginx/conf.d/$DOMAIN.conf &> /dev/null \
		|| OwnError "The $DOMAIN Is Not Found In Available Websites List"

		if [ $? -eq 0 ]
		then

			# Display The Specific Site Configuration
			echo -e "\033[36mDisplay Nginx Configuration For $DOMAIN\e[0m"
			cat /etc/nginx/conf.d/$DOMAIN.conf \
			|| OwnError "Unable To Display Nginx Configuration For $DOMAIN"

		fi

	elif [ "$2" = "info" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME

		# Display The Specific Site Configuration
		EESITEINFO

	elif [ "$2" = "create" ]
	then

		# Configure Variables
		SITENAMECHECK=$3
		EESITECREATE=$4
		WPCACHEOPTION=$5

		# Auto Switch The Options
		if [ "$EESITECREATE" = "--basic" ] || [ "$EESITECREATE" = "--w3tc" ] || [ "$EESITECREATE" = "--wpsc" ] || [ "$EESITECREATE" = "--wpfc" ]
		then
			if [ "$WPCACHEOPTION" = "--wpsubdir" ] || [ "$WPCACHEOPTION" = "--wpsubdirectory" ] || [ "$WPCACHEOPTION" = "--wpsubdom" ] || [ "$WPCACHEOPTION" = "--wpsubdomain" ]
			then
				EESITECREATE=$5
				WPCACHEOPTION=$4
			else
				EESITECREATE=--wp
				WPCACHEOPTION=$4
			fi
		fi

		# WordPress SubDirectory Variables
		if [ "$EESITECREATE" = "--wpsubdir" ] || [ "$EESITECREATE" = "--wpsubdirectory" ]
		then
			NETWORKACTIVATE="--network"
		fi

		# WordPress SubDomain Variables
		if [ "$EESITECREATE" = "--wpsubdom" ] || [ "$EESITECREATE" = "--wpsubdomain" ]
		then
			NETWORKACTIVATE="--network"
			WPSUBDOMAINS="--subdomains"
		fi

		# USE DEFAULT WHEN POSSIBLES
		# ee site create example.com
		if [ "$EESITECREATE" = "" ]
		then
			EESITECREATE=--html
		fi


		# If No Cache Specified Use --basic As Default On WordPress Sites
		if [ "$WPCACHEOPTION" = "" ] && [ "$EESITECREATE" != "--html" ] && [ "$EESITECREATE" != "--php" ] && [ "$EESITECREATE" != "--mysql" ]
		then
			WPCACHEOPTION=--basic
		fi


		if [ "$EESITECREATE" = "--html" ]
		then

			# Configure Variable
			NGINXCONF=html/basic.conf
			echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

			# Setup HTML Nginx
			EESITENAME
			EEDOMAINSETUP
			PERMISSIONANDGIT

			# Display Success Message
			echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

		elif [ "$EESITECREATE" = "--php" ]
		then

			# Configure Variable
			NGINXCONF=php/basic.conf
			echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

			# Setup PHP Nginx
			EESITENAME
			EEDOMAINSETUP
			PERMISSIONANDGIT

			# Display Success Message
			echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

		elif [ "$EESITECREATE" = "--mysql" ]
		then

			# Configure Variable
			NGINXCONF=mysql/basic.conf
			echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

			# Setup PHP Nginx
			EESITENAME
			EEDOMAINSETUP
			PERMISSIONANDGIT

			# Call MYSQLINFO Function For MySQL Values
			MYSQLINFO
			EECREATEDATABASE

			# Add Database Information On ee-config.php
			echo -e "define('DB_NAME', '$WPDBNAME'); \ndefine('DB_USER', '$WPDBUSER'); \ndefine('DB_PASSWORD', '$WPDBPASS'); \ndefine('DB_HOST', '$MYSQLHOST');" \
			&>> /var/www/$DOMAIN/ee-config.php

			# Display Success Message
			echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

		elif [ "$EESITECREATE" = "--wp" ]
		then

			if [ "$WPCACHEOPTION" = "--basic" ]
			then

				# Configure Variable
				NGINXCONF=wp/basic.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Basic Nginx
				SETUPDOMAIN
				NGINXHELPER
				PERMISSIONANDGIT

				# Display Success Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--w3tc" ]
			then

				# Configure Variable
				NGINXCONF=wp/w3tc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup W3 Total Cache Nginx
				SETUPDOMAIN
				NGINXHELPER
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpsc" ]
			then

				# Configure Variable
				NGINXCONF=wp/wpsc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup WP Super Cache Nginx
				SETUPDOMAIN
				NGINXHELPER
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mWP Super Cache: http://$DOMAIN/wp-admin/options-general.php?page=wpsupercache\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpfc" ]
			then

				# Configure Variable
				NGINXCONF=wp/wpfc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Fastcgi Cache Nginx
				SETUPDOMAIN
				NGINXHELPER
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mNginx Helper: http://$DOMAIN/wp-admin/options-general.php?page=nginx\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			fi

		elif [ "$EESITECREATE" = "--wpsubdir" ] || [ "$EESITECREATE" = "--wpsubdirectory" ]
		then

			if [ "$WPCACHEOPTION" = "--basic" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdir/basic.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN
				
				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				PERMISSIONANDGIT


				# Display Success Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--w3tc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdir/w3tc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpsc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdir/wpsc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				#ln -s /var/www/22222/htdocs/db/pma /var/www/$DOMAIN/htdocs/pma

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mWP Super Cache: http://$DOMAIN/wp-admin/network/settings.php?page=wpsupercache\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpfc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdir/wpfc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT


				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mNginx Helper: http://$DOMAIN/wp-admin/network/settings.php?page=nginx\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			fi

		elif [ "$EESITECREATE" = "--wpsubdom" ] || [ "$EESITECREATE" = "--wpsubdomain" ]
		then

			if [ "$WPCACHEOPTION" = "--basic" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdomain/basic.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN
				
				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				PERMISSIONANDGIT

				# Display Success Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--w3tc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdomain/w3tc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				#ln -s /var/www/22222/htdocs/db/pma /var/www/$DOMAIN/htdocs/pma

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpsc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdomain/wpsc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				#ln -s /var/www/22222/htdocs/db/pma /var/www/$DOMAIN/htdocs/pma

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mWP Super Cache: http://$DOMAIN/wp-admin/network/settings.php?page=wpsupercache\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			elif [ "$WPCACHEOPTION" = "--wpfc" ]
			then

				# Configure Variable
				NGINXCONF=wpsubdomain/wpfc.conf
				echo -e "SITENAMECHECK = $SITENAMECHECK \nEESITECREATE = $EESITECREATE \nWPCACHEOPTION = $WPCACHEOPTION \nNETWORKACTIVATE = $NETWORKACTIVATE \nWPSUBDOMAINS = $WPSUBDOMAINS \nNGINXCONF = $NGINXCONF" &>> $INSTALLLOG

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "\033[37mWordPress Admin Username: $WPADMINUSER\e[0m"
				echo -e "\033[37mWordPress Admin Password: $WPADMINPASS\e[0m"
				echo
				echo -e "\033[36mPlease Configure The Following Settings...\e[0m"
				#echo -e "\033[36mPermalink Settings: http://$DOMAIN/wp-admin/options-permalink.php\e[0m"
				echo -e "\033[36mNginx Helper: http://$DOMAIN/wp-admin/network/settings.php?page=nginx\e[0m"
				echo -e "\033[36mW3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general\e[0m"

				# Display Success Message
				echo
				echo -e "\033[37mSuccessfully Created New Website: http://$WWWDOMAIN\e[0m"

			fi
		fi

	elif [ "$2" = "enable" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME
	    mv /usr/share/easyengine/disabled-sites/$DOMAIN.conf /etc/nginx/conf.d/$DOMAIN.conf || OwnError "Unable To move conf file For $DOMAIN"
		# Reload Nginx Configuration
		NGINXRELOAD

	elif [ "$2" = "disable" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME

		echo -e "\033[36mRemoving conf file $DOMAIN\e[0m"
		mv /etc/nginx/conf.d/$DOMAIN.conf /usr/share/easyengine/disabled-sites/$DOMAIN.conf	|| OwnError "Unable To Move conf file For $DOMAIN"

		# Reload Nginx Configuration
		NGINXRELOAD

	elif [ "$2" = "delete" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		SITEDELETEARG=$4
		EESITENAME

		# USE DEFAULT WHEN POSSIBLES
		if [ "$SITEDELETEARG" = "" ]
		then
			SITEDELETEARG=--all
		fi

		if [ "$SITEDELETEARG" = "--db" ]
		then

			# Remove Database
			REMOVEDB

		elif [ "$SITEDELETEARG" = "--files" ]
		then

			# Remove Webroot
			REMOVEFILES

		elif [ "$SITEDELETEARG" = "--all" ]
		then

			# Remove All Database And Webroot
			REMOVEDB
			REMOVEFILES

			# Remove Nginx Configuration
			REMOVENGINXCONF

			# Reload Nginx
			NGINXRELOAD

			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITMESSAGE="Delete Website With $SITEDELETEARG Option: $DOMAIN"
			

		elif [ "$SITEDELETEARG" = "--all-no-prompt" ]
		then

			# Remove All Database And Webroot
			REMOVEDB "no-prompt"
			REMOVEFILES "no-prompt"

			# Remove Nginx Configuration
			REMOVENGINXCONF "no-prompt"

			# Reload Nginx
			NGINXRELOAD

			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITMESSAGE="Delete Website With $SITEDELETEARG Option: $DOMAIN"
			
		fi

	elif [ "$2" = "edit" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME
			
		# Edit The Nginx Configuration For $DOMAIN
		EESITEEDIT
		
		if [ $(cd /etc/nginx; git status -s /etc/nginx/conf.d/$DOMAIN | wc -l) -ne 0 ]
		then
			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITMESSAGE="Edited Website: $DOMAIN"
			

			# Reload Nginx Configuration
			NGINXRELOAD
		fi


	else
		echo -e "\033[36mList Of Available Commands:\e[0m"
		echo -e "\tinfo:\t Dispaly Information About Given Website"
		echo -e "\tlist:\t List Nginx Enabled Websites"
		echo -e "\tshow:\t Display Nginx Configuration For Given Website"
		echo -e "\tcreate:\t Create A New HTML PHP MySQL & WordPress Website"
		echo -e "\tdelete:\t Delete Existing Website"
		echo -e "\tenable:\t Enable Website"
		echo -e "\tedit: Manually Edit Website"

	fi

elif [ "$1" = "debug" ]
then

	# Default Action = Start Debugging
	EE_DEBUG="--start"

	# Auto Arrenge Options
	for ARGS in $@
	do
		[ "$ARGS" = "-i" ] && EE_DEBUG_INTERACTIVE=$ARGS && echo EE_DEBUG_INTERACTIVE = $EE_DEBUG_INTERACTIVE &>> $INSTALLLOG
		[ "$ARGS" = "--stop" ] && EE_DEBUG=$ARGS && echo EE_DEBUG = $EE_DEBUG &>> $INSTALLLOG
		[ "$ARGS" = "--nginx" ] && EE_DEBUG_NGINX=$ARGS && echo EE_DEBUG_NGINX = $EE_DEBUG_NGINX &>> $INSTALLLOG
		[ "$ARGS" = "--rewrite" ] && EE_DEBUG_REWRITE=$ARGS && echo EE_DEBUG_REWRITE = $EE_DEBUG_REWRITE &>> $INSTALLLOG
		[ "$ARGS" = "--php" ] && EE_DEBUG_PHP=$ARGS && echo EE_DEBUG_PHP = $EE_DEBUG_PHP &>> $INSTALLLOG
		[ "$ARGS" = "--fpm" ] && EE_DEBUG_FPM=$ARGS && echo EE_DEBUG_FPM = $EE_DEBUG_FPM &>> $INSTALLLOG
		[ "$ARGS" = "--mysql" ] && EE_DEBUG_MYSQL=$ARGS && echo EE_DEBUG_MYSQL = $EE_DEBUG_MYSQL &>> $INSTALLLOG
		[ "$ARGS" = "--wp" ] && EE_DEBUG_WP=$ARGS && echo EE_DEBUG_WP = $EE_DEBUG_WP &>> $INSTALLLOG
		if [ "$ARGS" != "debug" ] && [ "$ARGS" != "-i" ] && [ "$ARGS" != "--start" ] && [ "$ARGS" != "--stop" ] && [ "$ARGS" != "--nginx" ] && [ "$ARGS" != "--rewrite" ] && [ "$ARGS" != "--php" ] && [ "$ARGS" != "--fpm" ] && [ "$ARGS" != "--mysql" ] && [ "$ARGS" != "--wp" ] 
		then
			ls /etc/nginx/conf.d/ | grep $ARGS &>> $INSTALLLOG
			if [ $? -eq 0 ]
			then
				EE_DEBUG_SITENAME=$ARGS && echo EE_DEBUG_SITENAME = $EE_DEBUG_SITENAME &>> $INSTALLLOG
			fi
		fi
	done

	if [ "$EE_DEBUG" = "--start" ]
	then

		
		if [ -z "$EE_DEBUG_NGINX" ] && [ -z "$EE_DEBUG_REWRITE" ] && [ -z "$EE_DEBUG_PHP" ] && [ -z "$EE_DEBUG_FPM" ] && [ -z "$EE_DEBUG_MYSQL" ] && [ -z "$EE_DEBUG_WP" ]
		then
			EE_DEBUG_NGINX="--nginx" && echo EE_DEBUG_NGINX = $EE_DEBUG_NGINX &>> $INSTALLLOG
			EE_DEBUG_REWRITE="--rewrite" && echo EE_DEBUG_REWRITE = $EE_DEBUG_REWRITE &>> $INSTALLLOG
			EE_DEBUG_PHP="--php" && echo EE_DEBUG_PHP = $EE_DEBUG_PHP &>> $INSTALLLOG
			EE_DEBUG_FPM="--fpm" && echo EE_DEBUG_FPM = $EE_DEBUG_FPM &>> $INSTALLLOG
			EE_DEBUG_MYSQL="--mysql" && echo EE_DEBUG_MYSQL = $EE_DEBUG_MYSQL &>> $INSTALLLOG

			if [ -n "$EE_DEBUG_SITENAME" ]
			then
				EE_DEBUG_WP="--wp" && echo EE_DEBUG_WP = $EE_DEBUG_WP &>> $INSTALLLOG
			fi
		fi
		

		if [ -z "$EE_DEBUG_SITENAME" ]
		then

			if [ "$EE_DEBUG_NGINX" = "--nginx" ]
			then
				# Debug Nginx
				DEBUG_NGINX

				# Log Message
				LOGMESSAGE="/var/log/nginx/*.error.log"
			fi

			if [ "$EE_DEBUG_REWRITE" = "--rewrite" ]
			then
				# Debug Nginx Rewrite Logs
				DEBUG_NGINX_REWRITE

				# Log Message
				LOGMESSAGE="$LOGMESSAGE /var/log/nginx/*.error.log"
			fi

			if [ "$EE_DEBUG_WP" = "--wp" ]
			then
				echo -e "\033[31mThe --wp Option Can Be Enabled For WordPress Site Only\e[0m"
			fi

		else

			# Get The Domain Name
			SITENAMECHECK=$EE_DEBUG_SITENAME
			EESITENAME

			if [ "$EE_DEBUG_NGINX" = "--nginx" ]
			then
				# Debug Nginx
				DEBUG_NGINX_SITE

				# Log Message
				LOGMESSAGE="/var/www/$DOMAIN/logs/error.log"				
			fi

			if [ "$EE_DEBUG_REWRITE" = "--rewrite" ]
			then
				# Debug Nginx Rewrite Logs
				DEBUG_NGINX_REWRITE_SITE

				# Log Message
				LOGMESSAGE="$LOGMESSAGE /var/log/$DOMAIN/logs/error.log"
			fi

			if [ "$EE_DEBUG_WP" = "--wp" ]
			then
				# Debug WordPress Debug Log
				DEBUG_WORDPRESS

				# Log Message
				LOGMESSAGE="$LOGMESSAGE /var/www/$DOMAIN/htdocs/wp-content/debug.log"
			fi

		fi

		if [ "$EE_DEBUG_PHP" = "--php" ]
		then
			# Debug PHP
			DEBUG_PHP

			# Log Message
			LOGMESSAGE="$LOGMESSAGE /var/log/php/slow.log"
		fi

		if [ "$EE_DEBUG_FPM" = "--fpm" ]
		then
			# Debug PHP FPM
			DEBUG_PHP_FPM

			# Log Message
			LOGMESSAGE="$LOGMESSAGE /var/log/php/fpm.log"
		fi

		if [ "$EE_DEBUG_MYSQL" = "--mysql" ]
		then
			# Debug MySQL Slow Query
			DEBUG_MYSQL

			# Log Message
			LOGMESSAGE="$LOGMESSAGE /var/log/mysql/slow.log"
		fi

	elif [ "$EE_DEBUG" = "--stop" ]
	then

		if [ -z "$EE_DEBUG_NGINX" ] && [ -z "$EE_DEBUG_REWRITE" ] && [ -z "$EE_DEBUG_PHP" ] && [ -z "$EE_DEBUG_FPM" ] && [ -z "$EE_DEBUG_MYSQL" ] && [ -z "$EE_DEBUG_WP" ]
		then
			EE_DEBUG_NGINX="--nginx" && echo EE_DEBUG_NGINX = $EE_DEBUG_NGINX &>> $INSTALLLOG
			EE_DEBUG_REWRITE="--rewrite" && echo EE_DEBUG_REWRITE = $EE_DEBUG_REWRITE &>> $INSTALLLOG
			EE_DEBUG_PHP="--php" && echo EE_DEBUG_PHP = $EE_DEBUG_PHP &>> $INSTALLLOG
			EE_DEBUG_FPM="--fpm" && echo EE_DEBUG_FPM = $EE_DEBUG_FPM &>> $INSTALLLOG
			EE_DEBUG_MYSQL="--mysql" && echo EE_DEBUG_MYSQL = $EE_DEBUG_MYSQL &>> $INSTALLLOG
			EE_DEBUG_WP="--wp" && echo EE_DEBUG_WP = $EE_DEBUG_WP &>> $INSTALLLOG
		fi	

		if [ -z "$EE_DEBUG_SITENAME" ]
		then

			if [ "$EE_DEBUG_NGINX" = "--nginx" ]
			then
				# Debug Nginx
				DEBUG_NGINX_STOP
			fi

			if [ "$EE_DEBUG_REWRITE" = "--rewrite" ]
			then
				# Debug Nginx Rewrite Logs
				DEBUG_NGINX_REWRITE_STOP
			fi

		else

			# Get The Domain Name
			SITENAMECHECK=$EE_DEBUG_SITENAME
			EESITENAME

			if [ "$EE_DEBUG_NGINX" = "--nginx" ]
			then
				# Debug Nginx
				DEBUG_NGINX_SITE_STOP
			fi

			if [ "$EE_DEBUG_REWRITE" = "--rewrite" ]
			then
				# Debug Nginx Rewrite Logs
				DEBUG_NGINX_REWRITE_SITE_STOP
			fi

			if [ "$EE_DEBUG_WP" = "--wp" ]
			then
				# Debug WordPress Debug Log
				DEBUG_WORDPRESS_STOP
			fi

		fi

		if [ "$EE_DEBUG_PHP" = "--php" ]
		then
			# Debug PHP
			DEBUG_PHP_STOP
		fi

		if [ "$EE_DEBUG_FPM" = "--fpm" ]
		then
			# Debug PHP FPM
			DEBUG_PHP_FPM_STOP
		fi

		if [ "$EE_DEBUG_MYSQL" = "--mysql" ]
		then
			# Debug MySQL Slow Query
			DEBUG_MYSQL_STOP
		fi

	fi

	# Lets Restart Services
	if [ "$EE_DEBUG_NGINX" = "--nginx" ] || [ "$EE_DEBUG_REWRITE" = "--rewrite" ]
	then
		# Reload Nginx
		NGINXRELOAD
	fi

	if [ "$EE_DEBUG_PHP" = "--php" ] || [ "$EE_DEBUG_FPM" = "--fpm" ]
	then
		# Restart php-FPM
		PHPRESTART
	fi

	#if [ "$EE_DEBUG_MYSQL" = "--mysql" ]
	#then
		# Restart MySQL
		#MYSQLRESTART
	#fi

	if [ "$EE_DEBUG_INTERACTIVE" = "-i" ]
	then
		# Lets Start Debug In Interactive Mode
		DEBUG_INTERACTIVE
	elif [ "$EE_DEBUG_INTERACTIVE" != "-i" ] && [ "$EE_DEBUG" != "--stop" ]
	then
		echo -e "\033[37mtail -f $LOGMESSAGE\e[0m"
	fi


elif [ "$1" = "update" ]
then

	# Update EasyEngine
	echo -e "\033[36mChecking EasyEngine Update, Please Wait...\e[0m"
	/bin/bash <(curl -sL https://raw.githubusercontent.com/mylivingweb/easyengine/stable/usr/local/sbin/eeupdate)

else
	echo -e "\033[36mList Of Available Commands:\e[0m"
	echo -e "\tinfo:\t Display Nginx PHP MySQL Information\t"
	echo -e "\thelp:\t Display EasyEngine Help\t"
	echo -e "\tsite:\t Do Various Site Specific Operations\t"
	echo -e "\tdebug:\t Do Various Debugging Operations\t"
	echo -e "\tsystem:\t Do Various System Level Operations\t"
	echo -e "\tupdate:\t Update EasyEngine (ee)\t"
	echo -e "\tversion: Display EasyEngine (ee) Version\t"


fi

}

EasyEngine $@ | tee -ai $INSTALLLOG
